#include <stdio.h>
#define _USE_MATH_DEFINES
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <omp.h>

#ifndef DEBUG
#define DEBUG	false
#endif

omp_lock_t	Lock;
volatile int	NumInThreadTeam;
volatile int	NumAtBarrier;
volatile int	NumGone;

int	NowYear;		// 2024- 2029
int	NowMonth;		// 0 - 11

float	NowPrecip;		// inches of rain per month
float	NowTemp;		// temperature this month
float	NowHeight;		// grain height in inches
int	NowNumDeer;		// number of deer in the current population
float NowFertilizer; // Fertilizer generated by deer.

const float GRAIN_GROWS_PER_MONTH =	       12.0;
const float ONE_DEER_EATS_PER_MONTH =		1.0;

const float AVG_PRECIP_PER_MONTH =		7.0;	// average
const float AMP_PRECIP_PER_MONTH =		6.0;	// plus or minus
const float RANDOM_PRECIP =			2.0;	// plus or minus noise

const float AVG_TEMP =				60.0;	// average
const float AMP_TEMP =				20.0;	// plus or minus
const float RANDOM_TEMP =			10.0;	// plus or minus noise

const float MIDTEMP =				40.0;
const float MIDPRECIP =				10.0;
unsigned int seed = 0;

void
InitBarrier( int n )
{
        NumInThreadTeam = n;
        NumAtBarrier = 0;
	omp_init_lock( &Lock );
}

void
WaitBarrier( )
{
        omp_set_lock( &Lock );
        {
                NumAtBarrier++;
                if( NumAtBarrier == NumInThreadTeam )
                {
                        NumGone = 0;
                        NumAtBarrier = 0;
                        // let all other threads get back to what they were doing
			// before this one unlocks, knowing that they might immediately
			// call WaitBarrier( ) again:
                        while( NumGone != NumInThreadTeam-1 );
                        omp_unset_lock( &Lock );
                        return;
                }
        }
        omp_unset_lock( &Lock );

        while( NumAtBarrier != 0 );	// this waits for the nth thread to arrive

        #pragma omp atomic
        NumGone++;			// this flags how many threads have returned
}

float
Ranf( float low, float high )
{
        float r = (float) rand();               // 0 - RAND_MAX
        float t = r  /  (float) RAND_MAX;       // 0. - 1.

        return   low  +  t * ( high - low );
}

int UpdateTempAndPrecip() {
    float ang = (  30.*(float)NowMonth + 15.  ) * ( M_PI / 180. );	// angle of earth around the sun

    float temp = AVG_TEMP - AMP_TEMP * cos( ang );
    NowTemp = temp + Ranf( -RANDOM_TEMP, RANDOM_TEMP );

    float precip = AVG_PRECIP_PER_MONTH + AMP_PRECIP_PER_MONTH * sin( ang );
    NowPrecip = precip + Ranf( -RANDOM_PRECIP, RANDOM_PRECIP );
    if( NowPrecip < 0. )
	    NowPrecip = 0.;
}



int Watcher() {
    while(NowYear < 2030)
    {
        	// compute a temporary next-value for this quantity
	// based on the current state of the simulation:

	// DoneComputing barrier:
	WaitBarrier( );

	// DoneAssigning barrier:
	WaitBarrier( );

	fprintf(stderr, "%.3f , %.3f , %.3f , %d, %.3f\n",
                NowTemp, NowPrecip, NowHeight, NowNumDeer, NowFertilizer);

    NowMonth = (NowMonth + 1) % 12;
    if (NowMonth == 0) {
        NowYear++;
    }

    UpdateTempAndPrecip();
	// DonePrinting barrier:
	WaitBarrier( );
    }

    return 0;
}

int Deer() {
    while(NowYear < 2030)
    {
        	// compute a temporary next-value for this quantity
	// based on the current state of the simulation:
	int nextNumDeer = NowNumDeer;
    int carryingCapacity = (int)( NowHeight );
    if( nextNumDeer < carryingCapacity ) {
        nextNumDeer++;
    }
    else {
        if ( nextNumDeer > carryingCapacity ) nextNumDeer--;
    }
    if( nextNumDeer < 0 ) nextNumDeer = 0;
	// DoneComputing barrier:
	WaitBarrier( );
	
    NowNumDeer = nextNumDeer;
	// DoneAssigning barrier:
	WaitBarrier( );

	// DonePrinting barrier:
	WaitBarrier( );
    }

    return 0;
}

float
SQR( float x )
{
        return x*x;
}

int Grain() {
    while(NowYear < 2030)
    {
        // compute a temporary next-value for this quantity
        // based on the current state of the simulation:
        float tempFactor = exp(   -SQR(  ( NowTemp - MIDTEMP ) / 10.  )   );
        float precipFactor = exp(   -SQR(  ( NowPrecip - MIDPRECIP ) / 10.  )   );
        
        float nextHeight = NowHeight;
        // Fertilizer Effect
        float fertilizerFactor = 1 + (NowFertilizer / 100);

        nextHeight += (tempFactor * precipFactor * GRAIN_GROWS_PER_MONTH) * fertilizerFactor;

        


        nextHeight -= (float)NowNumDeer * ONE_DEER_EATS_PER_MONTH;
        if( nextHeight < 0. ) nextHeight = 0.;
        // DoneComputing barrier:
        WaitBarrier( );
        NowHeight = nextHeight;

        // DoneAssigning barrier:
        WaitBarrier( );
        

        // DonePrinting barrier:
        WaitBarrier( );
    }

    return 0;
}

int Fertilizer() {
    while(NowYear < 2030)
    {
        // DoneComputing barrier:
        float nextFertilizer = NowFertilizer * (1 - NowPrecip / 20);
        nextFertilizer += NowNumDeer;
	    WaitBarrier( );
        NowFertilizer = nextFertilizer;
        // DoneAssigning barrier:
	    WaitBarrier( );

        // DonePrinting barrier:
        WaitBarrier( );
    }
}

int
main( int argc, char *argv[ ] )
{
// starting date and time:
    NowMonth =    0;
    NowYear  = 2024;

    // starting state (feel free to change this if you want):
    NowNumDeer = 2;
    NowHeight =  5.;
    // starting date and time:
    NowMonth =    0;
    NowYear  = 2024;

    // starting state (feel free to change this if you want):
    NowNumDeer = 2;
    NowHeight =  5.;
    NowFertilizer = 0.;


    UpdateTempAndPrecip(); // Initial values for temp and precipitation.
    omp_set_num_threads(4);	// same as # of sections
    InitBarrier(4);		// or 4
    #pragma omp parallel sections
    {
        #pragma omp section
        {
            Deer( );
        }

        #pragma omp section
        {
            Grain( );
        }

        #pragma omp section
        {
            Watcher( );
        }

    	#pragma omp section
    	{
    		Fertilizer( );	
    	}
    }       // implied barrier -- all functions must return in order
	// to allow any of them to get past here

    return 0;
}